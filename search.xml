<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于控制台的银行ATM取款机</title>
      <link href="/2021/12/13/ji-yu-kong-zhi-tai-de-yin-xing-atm-qu-kuan-ji/"/>
      <url>/2021/12/13/ji-yu-kong-zhi-tai-de-yin-xing-atm-qu-kuan-ji/</url>
      
        <content type="html"><![CDATA[<p>程序有4个类，Human类负责创建个人信息类，Menu负责创建菜单，Function类进行功能实现，Major类是主函数，以arraylist集合作为数据存储，实现了查看余额，存钱，取钱，不同账户之间转账功能，可查看个人信息并修改和填加账户。</p><h3 id="Human类"><a href="#Human类" class="headerlink" title="Human类"></a>Human类</h3><pre class="line-numbers language-none"><code class="language-none">package ATM;public class Human {    private String account;    private String name;    private String Idcord;    private String password;    private int money;    public String getAccount() {        return account;    }    public void setAccount(String account) {        this.account = account;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getIdcord() {        return Idcord;    }    public void setIdcord(String idcord) {        Idcord = idcord;    }    public String getPassword() {        return password;    }    public void setPassword(String password) {        this.password = password;    }    public int getMoney() {        return money;    }    public void setMoney(int money) {        this.money = money;    }    public Human() {    }    public Human(String account, String name, String idcord, String password, int money) {        this.account = account;        this.name = name;        Idcord = idcord;        this.password = password;        this.money = money;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置变量信息及构造方法。</p><h3 id="Major类"><a href="#Major类" class="headerlink" title="Major类"></a>Major类</h3><pre class="line-numbers language-none"><code class="language-none">package ATM;import java.util.ArrayList;import java.util.Scanner;public class Menu {    Functions n = new Functions();    public void majormenu(ArrayList&lt;Human&gt; arr,String account) {        System.out.println("-------------------------");        System.out.println("       1.取钱");        System.out.println("       2.存钱");        System.out.println("       3.转账");        System.out.println("       4.修改密码");        System.out.println("       5.添加账户");        System.out.println("       6.查看个人信息");        System.out.println("       7.退出系统");        System.out.println("-------------------------");        System.out.println("请输入数字，选择功能");        System.out.println("请输入选项:");        Scanner sc = new Scanner(System.in);        int i = sc.nextInt();        switch (i) {            case 1:                n.accounting(arr,account);                majormenu(arr,account);                break;            case 2:                n.addmoney(arr,account);                majormenu(arr,account);                break;            case 3:                n.money(arr,account);                majormenu(arr,account);                break;            case 4:                n.correction(arr,account);                majormenu(arr,account);                break;            case 5:                n.write(arr);                majormenu(arr,account);                break;            case 6:n.print(arr);                majormenu(arr,account);                break;            case 7:                System.out.println("谢谢使用");                System.exit(0);                break;            default:                throw new IllegalStateException("Unexpected value: " + i);        }}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印菜单页面，并与Functions中功能向关联。</p><h3 id="Functions类"><a href="#Functions类" class="headerlink" title="Functions类"></a>Functions类</h3><h4 id="addarr方法"><a href="#addarr方法" class="headerlink" title="addarr方法"></a>addarr方法</h4><pre class="line-numbers language-none"><code class="language-none">public  ArrayList&lt;Human&gt; addarr() {       ArrayList&lt;Human&gt; arr = new ArrayList&lt;&gt;();       Human s1 = new Human("12345", "amdin1", "11111", "123456", 0);       Human s2 = new Human("23456", "amdin2", "22222", "234567", 0);       Human s3 = new Human("34567", "amdin3", "33333", "345678", 0);       arr.add(s1);       arr.add(s2);       arr.add(s3);       return arr;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建存储信息的ArrayList集合，并初始化了3个账户。</p><h4 id="login方法"><a href="#login方法" class="headerlink" title="login方法"></a>login方法</h4><pre class="line-numbers language-none"><code class="language-none">public String login(ArrayList&lt;Human&gt; arr) {       System.out.println("请输入账号：");       Scanner sc = new Scanner(System.in);       String account = sc.next();       int change=2;       for (Human s : arr) {           if (account.equals(s.getAccount())) {               change = 1;               break;           }       }       if(change!=1){           System.out.println("账号错误");           System.exit(0);       }       System.out.println("请输入密码：");       String word = sc.next();       for (Human m : arr) {           if (account.equals(m.getAccount())) {               if(word.equals(m.getPassword())){                   System.out.println("登录成功");                   break;               } else {                   System.out.println("密码错误，请重新输入");                   System.exit(0);               }           }       }       return account;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入账号密码进行登录，会与储存好的信息进行对比，并返回账号，作为后续操作此账户的依据。</p><h4 id="print方法"><a href="#print方法" class="headerlink" title="print方法"></a>print方法</h4><pre class="line-numbers language-none"><code class="language-none">public void print(ArrayList&lt;Human&gt; arr) {     System.out.println("用户详细信息");     System.out.println("------------------------------------------------");     System.out.println("账号" + "\t\t" + "姓名" + "\t\t" + "身份证号" + "\t" + "密码" + "\t\t" + "余额");     for (Human s : arr) {         System.out.println(s.getAccount() + "\t" + s.getName() + "\t" + s.getIdcord() + "\t" + s.getPassword() + "\t" + s.getMoney());     } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印账户信息</p><h4 id="accounting方法"><a href="#accounting方法" class="headerlink" title="accounting方法"></a>accounting方法</h4><pre class="line-numbers language-none"><code class="language-none">public void accounting(ArrayList&lt;Human&gt; arr, String account) {     Scanner sc = new Scanner(System.in);     for (Human m:arr) {         if (account.equals(m.getAccount())) {             System.out.println("请输入取款金额：");             int cost = sc.nextInt();             int balance = m.getMoney() - cost;             m.setMoney(balance);             System.out.println("取款成功");             System.out.println("账户"+account);             System.out.println("姓名"+m.getName());             System.out.println("取款金额"+cost);             System.out.println("剩余金额"+m.getMoney());         }     } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>取款功能</p><h4 id="addmoney"><a href="#addmoney" class="headerlink" title="addmoney"></a>addmoney</h4><pre class="line-numbers language-none"><code class="language-none">public void addmoney(ArrayList&lt;Human&gt; arr, String account) {    Scanner sc = new Scanner(System.in);    for (Human s:arr) {        if (account.equals(s.getAccount())) {            System.out.println("请输入存款金额");            int cost = sc.nextInt();            int balance = s.getMoney() + cost;            s.setMoney(balance);            System.out.println("存款成功");            System.out.println("账户"+account);            System.out.println("姓名"+s.getName());            System.out.println("存款金额"+cost);            System.out.println("剩余金额"+s.getMoney());        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存款功能</p><h4 id="correction方法"><a href="#correction方法" class="headerlink" title="correction方法"></a>correction方法</h4><pre class="line-numbers language-none"><code class="language-none">public void correction(ArrayList&lt;Human&gt; arr, String account) {       Scanner sc = new Scanner(System.in);       for (int i = 0; i &lt; arr.size(); i++) {           Human m = arr.get(i);           if (account.equals(m.getAccount())) {               System.out.println("请输入身份证号：");               String idcord = sc.nextLine();               if (idcord.equals(m.getIdcord())) {                   System.out.println("请输入新密码");                   String nextword = sc.nextLine();                   m.setPassword(nextword);               } else {                   System.out.println("身份证号码错误，请重新输入");                   correction(arr, account);               }           }       }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改密码</p><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><pre class="line-numbers language-none"><code class="language-none">public void write(ArrayList&lt;Human&gt; arr) {        System.out.println("请输入账户信息：");        Scanner sc = new Scanner(System.in);        System.out.println("请输入账号");        String account = sc.next();        System.out.println("请输入姓名");        String name = sc.next();        System.out.println("请输入身份证号码：");        String idcord = sc.next();        System.out.println("请输入密码");        String password = sc.next();        System.out.println("请输入余额");        int money = sc.nextInt();        Human h = new Human();        h.setAccount(account);        h.setIdcord(idcord);        h.setName(name);        h.setPassword(password);        h.setMoney(money);        arr.add(h);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加账户</p><h4 id="money方法"><a href="#money方法" class="headerlink" title="money方法"></a>money方法</h4><pre class="line-numbers language-none"><code class="language-none">public void money(ArrayList&lt;Human&gt; arr, String account) {       Scanner sc = new Scanner(System.in);       for (int i=0;i&lt; arr.size();i++) {           Human old= arr.get(i);           if (account.equals(old.getAccount())) {               System.out.println("请输入转账账户：");               String account1 = sc.nextLine();               for(int j=0;j&lt; arr.size();j++){                   Human s= arr.get(j);                   if (account1.equals(s.getAccount())) {                       System.out.println("请输入转账金额：");                       int money = sc.nextInt();                       old.setMoney(old.getMoney() - money);                       s.setMoney(s.getMoney() + money);                       System.out.println("转账成功");                       System.out.println("账户"+account);                       System.out.println("姓名"+s.getName());                       System.out.println("转账金额"+money);                       System.out.println("剩余金额"+old.getMoney());                   }               }           }       }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转账功能</p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于控制台的会员管理系统</title>
      <link href="/2021/11/14/ji-yu-lian-biao-de-hui-yuan-guan-li-xi-tong/"/>
      <url>/2021/11/14/ji-yu-lian-biao-de-hui-yuan-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h4 id="此代码使用集合进行账户信息的储存，共有4个类，people类是链表的单位，system类是主函数，负责函数调用，menu类是主菜单，account类有带初始信息的链表创建，账户增加，账户密码修改，金额消费，金额充值，积分计算等功能。"><a href="#此代码使用集合进行账户信息的储存，共有4个类，people类是链表的单位，system类是主函数，负责函数调用，menu类是主菜单，account类有带初始信息的链表创建，账户增加，账户密码修改，金额消费，金额充值，积分计算等功能。" class="headerlink" title="此代码使用集合进行账户信息的储存，共有4个类，people类是链表的单位，system类是主函数，负责函数调用，menu类是主菜单，account类有带初始信息的链表创建，账户增加，账户密码修改，金额消费，金额充值，积分计算等功能。"></a>此代码使用集合进行账户信息的储存，共有4个类，people类是链表的单位，system类是主函数，负责函数调用，menu类是主菜单，account类有带初始信息的链表创建，账户增加，账户密码修改，金额消费，金额充值，积分计算等功能。</h4><h3 id="people类"><a href="#people类" class="headerlink" title="people类"></a>people类</h3><pre class="line-numbers language-none"><code class="language-none">public class people {    private int number;    private String name;    private String password;    private int money;    private int score;    public int getNumber() {        return number;    }    public void setNumber(int number) {        this.number = number;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getPassword() {        return password;    }    public void setPassword(String password) {        this.password = password;    }    public int getMoney() {        return money;    }    public void setMoney(int money) {        this.money = money;    }    public int getScore() {        return score;    }    public void setScore(int score) {        this.score = score;    }    public people() {    }    public people(int number, String name, String password, int money, int score) {        this.number = number;        this.name = name;        this.password = password;        this.money = money;        this.score = score;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>people类设定五个属性都是私有变量，所以set方法都使用了this关键字，写了一个无惨构造方法，一个带参构造方法，带参构造方法在创建带账户信息的链表时用到了。</p><h3 id="account类"><a href="#account类" class="headerlink" title="account类"></a>account类</h3><p>account类是此程序的灵魂所在，包含程序的信息存储和功能实现。为了在其他类中方便调用，account方法都用static关键字修饰。</p><pre class="line-numbers language-none"><code class="language-none">public static ArrayList&lt;people&gt; addarr(){        ArrayList&lt;people&gt; arr = new ArrayList&lt;&gt;();        people s1 = new people(1, "amdin1", "123456", 50, 0);        people s2 = new people(2, "amdin2", "234567", 50, 0);        people s3 = new people(3, "amdin3", "345678", 50, 0);        arr.add(s1);        arr.add(s2);        arr.add(s3);        return arr;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>add方法主要是为了链表的创建，使用了people类的带参的构造方法初始化了一部分数据，初始化了3个账户。</p><pre class="line-numbers language-none"><code class="language-none">public static void print(ArrayList&lt;people&gt; arr) {        System.out.println("会员详细信息");        System.out.println("------------------------------------------------");        System.out.println("编号" + "\t" + "姓名" + "\t\t" + "密码" + "\t\t" + "余额" + "\t" + "积分" + "\t");        for (people s : arr) {            //people s = arr.get();            System.out.println(s.getNumber() + "\t" + s.getName() + "\t" + s.getPassword() + "\t" + s.getMoney() + "\t" + s.getScore() + "\t");        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>print方法提供了会员信息的查看功能,为了美观使用了制表符\t，在循环部分，为了简便，使用了增强for。</p><pre class="line-numbers language-none"><code class="language-none">public static void write(ArrayList&lt;people&gt; arr) {        System.out.println("请输入账户信息：");        Scanner sc = new Scanner(System.in);        System.out.println("请输入编号");        int number = sc.nextInt();        System.out.println("请输入密码");        String password = sc.nextLine();        System.out.println("请输入姓名");        String name = sc.nextLine();        System.out.println("请输入余额");        int money = sc.nextInt();        System.out.println("请输入积分");        int score = sc.nextInt();        people h = new people();        h.setNumber(number);        h.setName(name);        h.setPassword(password);        h.setMoney(money);        h.setScore(score);        arr.add(h);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>write方法提供了通过键盘输入账户信息的功能。用Scanner通过键盘输入信息，用people类的set方法将输入的信息存入people类的对象h中，然后用add方法将people类对象h添加到存储账户信息的ArrayList<people>链表中。</people></p><pre class="line-numbers language-none"><code class="language-none">public static void accounting(ArrayList&lt;people&gt; arr) {        System.out.println("请输入姓名：");        Scanner sc = new Scanner(System.in);        String usename = sc.nextLine();        System.out.println("请输入密码：");        String word = sc.nextLine();        for (int i = 0; i &lt; arr.size(); i++) {            people m = arr.get(i);            if (usename.equals(m.getName())) {                if (word.equals(m.getPassword())) {                    System.out.println("请输入消费金额");                    int cost = sc.nextInt();                    int balance = m.getMoney() - cost;                    m.setMoney(balance);                } else                    System.out.println("密码错误。");                break;            }        }    }    //修改密码    public static void correction(ArrayList&lt;people&gt; arr) {        System.out.println("请输入姓名：");        Scanner sc = new Scanner(System.in);        String usename = sc.nextLine();        System.out.println("请输入密码：");        String word = sc.nextLine();        for (int i = 0; i &lt; arr.size(); i++) {            people m = arr.get(i);            if (usename.equals(m.getName())) {                if (word.equals(m.getPassword())) {                    System.out.println("请输入新密码");                    String nextword = sc.nextLine();                    m.setPassword(nextword);                } else                    System.out.println("密码错误。");                break;            }        }    }    //充值功能    public static void addmoney(ArrayList&lt;people&gt; arr){        System.out.println("请输入姓名：");        Scanner sc = new Scanner(System.in);        String usename = sc.nextLine();        System.out.println("请输入密码：");        String word = sc.nextLine();        for (int i = 0; i &lt; arr.size(); i++) {            people m = arr.get(i);            if (usename.equals(m.getName())) {                if (word.equals(m.getPassword())) {                    System.out.println("请输入充值金额");                    int cost = sc.nextInt();                    int balance = m.getMoney() + cost;                    m.setMoney(balance);                    System.out.println("充值成功");                } else                    System.out.println("密码错误。");                break;            }        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>accounting,corrrection.addmoney方法放到一起是因为它们3个方法框架基本是一样，不同只有第二个if判断里的内容，前面通过相同的判断决定是否有进行操作的权限。确定有操作权限以后，通过第二个if判断里的内容实现不同的功能，这3个功能可以合成一个减少代码量，同时避免输一次账h=号密码只能进行一个功能的弊端。<br>用scanner通过键盘输入账号密码后，用for循环找到相同的账号比较，相同了在进行密码比较，决定是否赋予操作权限。由于账号密码设定都是字符串，所以通过eaqul方法进行了字符串的比较。</p><h3 id="menu类"><a href="#menu类" class="headerlink" title="menu类"></a>menu类</h3><pre class="line-numbers language-none"><code class="language-none">import java.util.ArrayList;import java.util.Scanner;public class menu {    account n=new account();    public void majormenu(ArrayList&lt;people&gt; arr) {        System.out.println("-------------------------");        System.out.println("       1.会员管理");        System.out.println("       2.商品管理");        System.out.println("       3.点餐系统");        System.out.println("       4.退出系统");        System.out.println("       5.添加账户");        System.out.println("-------------------------");        System.out.println("请输入数字，选择功能");        System.out.println("请输入选项:");        Scanner sc =new Scanner(System.in);        int i=sc.nextInt();        switch (i){            case 1:vipmenu(arr);                break;            case 2:System.out.println("       2.商品管理");                break;            case 3:System.out.println("       3.点餐系统");                break;            case 4: System.exit(0);                break;            case 5: n.write(arr);                break;        }    }    public void vipmenu(ArrayList&lt;people&gt; arr){        System.out.println("-------------------------");        System.out.println("       1.查看会员信息");        System.out.println("       2.余额充值");        System.out.println("       3.修改密码");        System.out.println("       4.返回上一级菜单");        System.out.println("-------------------------");        System.out.println("请输入数字，选择功能");        Scanner sc =new Scanner(System.in);        int j=sc.nextInt();        switch (j) {            case 1:                n.print(arr);                vipmenu(arr);            case 2:                n.addmoney(arr);                vipmenu(arr);            case 3:                n.correction(arr);                vipmenu(arr);            case 4:                majormenu(arr);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了方便调用account类中的方法，提前创建了一个account类的对象n,majormenu是主菜单方法，实现了会员管理，退出系统，增加账户的功能。vipmenu是会员管理功能，集成了相关功能。为了让account类中方法操作ArrayList<people>链表，所以menu类中方法都用ArrayList<people> arr作为形参。</people></people></p><h3 id="system类"><a href="#system类" class="headerlink" title="system类"></a>system类</h3><pre class="line-numbers language-none"><code class="language-none">import java.util.ArrayList;import java.util.Scanner;public class system {    public static void main(String[] args) {        account n=new account();        ArrayList&lt;people&gt; arr=n.addarr();        menu i=new menu();        i.majormenu(arr);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作为主函数，为了方便使用其他类的方法，先创建了account类和menu类的对象。system类中先用account类中的add方法创建了存储账户信息的链表，然后调用majormenu创建菜单实现后续功能。</p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html整理</title>
      <link href="/2021/11/04/html-zheng-li/"/>
      <url>/2021/11/04/html-zheng-li/</url>
      
        <content type="html"><![CDATA[<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><h4 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h4><pre class="line-numbers language-none"><code class="language-none">&lt;img src="图像地址url"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>alt 替换文本，图像不能显示的文字</li><li>title 提示文本，鼠标放到图像上，显示的文字</li><li>width height 图像宽度和高度</li><li>border 图像边框粗细<h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4></li><li>/下一级   ../上一级</li></ul><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java知识总结</title>
      <link href="/2021/11/03/java-zhi-shi-zong-jie/"/>
      <url>/2021/11/03/java-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="Arraylist集合"><a href="#Arraylist集合" class="headerlink" title="Arraylist集合"></a>Arraylist集合</h4><ul><li>remove(Object o) 删除指定元素，返回是否删除成功。</li><li>remove(int index) 删除指定索引处元素，返回被删除的元素。</li><li>set(int index,E eleoment) 修改指定索引处元素，返回被修改的元素。<br>get(int index)返回索引处的元素。<br>size()返回集合中元素个数。<h3 id="list集合概述和特点"><a href="#list集合概述和特点" class="headerlink" title="list集合概述和特点"></a>list集合概述和特点</h3></li></ul><p>list集合概述</p><ul><li>有序集合，也被称为序列，用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素，并搜索列表中的元素。</li><li>与set集合不同，列表通常允许重复的元素。<br>list集合特点</li><li>有序：存储和取出的元素顺序一致。</li><li>可重复：存储的元素可以重复。<br>list特有方法</li><li>void add(int index,E element)——此集合指定位置插入元素</li><li>E remove(int index)———删除指定位置元素并返回被删除元素。</li><li>E set(int index,E element)——修改指定位置元素并返回别修改元素。</li><li>E get（int index）——返回索引处元素。<h4 id="listlterator"><a href="#listlterator" class="headerlink" title="listlterator"></a>listlterator</h4>listlterator 列表迭代器</li><li>通过list集合的listlterator（）方法得到，所以说他是list集合特有的迭代器。</li><li>用于允许程序员和任一方向遍历列表迭代器，在迭代期间修改列表，并修改列表中迭代器的当前位置。<h4 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h4></li><li>栈中数据先进后出。</li><li>队列中数据先进先出。<h3 id="Java基础之接口与抽象类的区别"><a href="#Java基础之接口与抽象类的区别" class="headerlink" title="Java基础之接口与抽象类的区别"></a>Java基础之接口与抽象类的区别</h3><h4 id="1、基本语法区别"><a href="#1、基本语法区别" class="headerlink" title="1、基本语法区别"></a>1、基本语法区别</h4>Java中接口和抽象类的定义语法分别为interface与abstract关键字。</li></ul><h4 id="抽象类：在Java中被abstract关键字修饰的类称为抽象类，被abstract关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点："><a href="#抽象类：在Java中被abstract关键字修饰的类称为抽象类，被abstract关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点：" class="headerlink" title="抽象类：在Java中被abstract关键字修饰的类称为抽象类，被abstract关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点："></a>抽象类：在Java中被abstract关键字修饰的类称为抽象类，被abstract关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点：</h4><p>+、抽象类不能被实例化只能被继承；</p><p>+、包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法；</p><p>+、抽象类中的抽象方法的修饰符只能为public或者protected，默认为public；</p><p>+、一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类；</p><p>+、抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。</p><h4 id="接口：Java中接口使用interface关键字修饰，特点为"><a href="#接口：Java中接口使用interface关键字修饰，特点为" class="headerlink" title="接口：Java中接口使用interface关键字修饰，特点为:"></a>接口：Java中接口使用interface关键字修饰，特点为:</h4><p>a、接口可以包含变量、方法；变量被隐士指定为public static final，方法被隐士指定为public abstract（JDK1.8之前）；</p><p>b、接口支持多继承，即一个接口可以extends多个接口，间接的解决了Java中类的单继承问题；</p><p>c、一个类可以实现多个接口；</p><p>d、JDK1.8中对接口增加了新的特性：（1）、默认方法（default method）：JDK 1.8允许给接口添加非抽象的方法实现，但必须使用default关键字修饰；定义了default的方法可以不被实现子类所实现，但只能被实现子类的对象调用；如果子类实现了多个接口，并且这些接口包含一样的默认方法，则子类必须重写默认方法；（2）、静态方法（static method）：JDK 1.8中允许使用static关键字修饰一个方法，并提供实现，称为接口静态方法。接口静态方法只能通过接口调用（接口名.静态方法名）。</p><p>如下例子所示：</p><pre class="line-numbers language-none"><code class="language-none">public interface Person{  public static final int a=10;  //JDK1.8    default void sayHello(){        System.out.println("Hello World");    }    public void say();}public abstract class Person{  public abstract void say();  public void eat(){};}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上述代码所示：</p><p>接口只能是功能的定义，而抽象类既可以为功能的定义也可以为功能的实现。</p><h3 id="2、面试题：接口与抽象类的区别"><a href="#2、面试题：接口与抽象类的区别" class="headerlink" title="2、面试题：接口与抽象类的区别"></a>2、面试题：接口与抽象类的区别</h3><p>相同点</p><p>（1）都不能被实例化 （2）接口的实现类或抽象类的子类都只有实现了接口或抽象类中的方法后才能实例化。</p><p>不同点</p><p>（1）接口只有定义，不能有方法的实现，java 1.8中可以定义default方法体，而抽象类可以有定义与实现，方法可在抽象类中实现。</p><p>（2）实现接口的关键字为implements，继承抽象类的关键字为extends。一个类可以实现多个接口，但一个类只能继承一个抽象类。所以，使用接口可以间接地实现多重继承。</p><p>（3）接口强调特定功能的实现，而抽象类强调所属关系。</p><p>（4）接口成员变量默认为public static final，必须赋初值，不能被修改；其所有的成员方法都是public、abstract的。抽象类中成员变量默认default，可在子类中被重新定义，也可被重新赋值；抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号结尾，不带花括号。</p><h4 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h4><p>哈希值是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>同一个对象多次调用hashCode()方法返回的哈希值是相同的。</li><li>默认情况下，不同对象哈希值是不同的，重写hashCode()方法，可以让不同对象的哈希值相同。<br>HashSet集合概述特点</li><li>底层数据结构是哈希表</li><li>对集合的迭代不做任何保证，也就是说不保证存储和取出元素顺序一致。</li><li>没有带索引的方法，使用不能使用普通for循环遍历。</li><li>由于是Set集合，所以元素不重复。<h4 id="LinkedHashSet集合特点"><a href="#LinkedHashSet集合特点" class="headerlink" title="LinkedHashSet集合特点"></a>LinkedHashSet集合特点</h4></li><li>哈希表和链表实现的Set接口，具有可预测的迭代顺序。</li><li>有链表保证元素有序，也就是存储和取出顺序一致。</li><li>由哈希表保证元素唯一，也就是没有重复的元素。</li></ul><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
